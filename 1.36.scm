(define tolerance 0.00001)
(define count 0)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define (try guess count)
    (display guess)
    (display "->")
    (display count)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next (+ count 1)))))
  (try first-guess 1))

(define (average x y)
  (/ (+ x y) 2.0))

(newline)
(display "Without damping")
(newline)
(display (fixed-point (lambda (x) (/ (log 1000) (log x))) 2))
(newline)
(display "With damping")
(newline)
(display (fixed-point (lambda (x) (average x (/ (log 1000) (log x)))) 2))
(newline)

(display "It takes 35 steps without damping. It takes 10 steps with damping.")
(newline)
(display "It is clear that damping makes the procedure faster.")
